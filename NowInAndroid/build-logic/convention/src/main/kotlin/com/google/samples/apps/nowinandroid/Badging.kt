/*
 * Copyright 2023 The Android Open Source Project
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package com.google.samples.apps.nowinandroid

import com.android.SdkConstants
import com.android.build.api.artifact.SingleArtifact
import com.android.build.api.variant.ApplicationAndroidComponentsExtension
import com.android.build.api.variant.ApplicationVariant
import com.android.build.gradle.BaseExtension
import com.google.common.truth.Truth.assertWithMessage
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider
import org.gradle.kotlin.dsl.assign
import org.gradle.kotlin.dsl.register
import org.gradle.language.base.plugins.LifecycleBasePlugin
import org.gradle.process.ExecOperations
import javax.inject.Inject

/**
 * Task that generates the badging file from an APK.
 * This task is used to verify that the manifest file is valid and that the app is debuggable.
 */
@CacheableTask
abstract class GenerateBadgingTask : DefaultTask() {

    /**
     * The output file containing the badging information.
     * This is the result of running aapt2 dump badging on the APK.
     */
    @get:OutputFile
    abstract val badging: RegularFileProperty

    /**
     * The APK file to generate badging from.
     */
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val apk: RegularFileProperty

    /**
     * The AAPT2 executable to use for generating the badging.
     * This is typically located in the Android SDK build-tools directory.
     */
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val aapt2Executable: RegularFileProperty

    /**
     * The [ExecOperations] service to use for running external processes.
     * This is used to run the aapt2 tool.
     */
    @get:Inject
    abstract val execOperations: ExecOperations

    /**
     * Executes the `task` action, which involves running the aapt2 tool to generate
     * the badging information for the APK. The output is written to the file
     * specified by the [badging] property.
     */
    @TaskAction
    fun taskAction() {
        execOperations.exec {
            commandLine(
                aapt2Executable.get().asFile.absolutePath,
                "dump",
                "badging",
                apk.get().asFile.absolutePath,
            )
            standardOutput = badging.asFile.get().outputStream()
        }
    }
}

/**
 * Task that checks if the generated badging file is the same as the golden badging file.
 * This task is used to verify that the manifest file has not changed unexpectedly.
 */
@CacheableTask
abstract class CheckBadgingTask : DefaultTask() {
    /**
     * Dummy output directory for the task.
     * This is required for the task to be considered up-to-date.
     * In order for the task to be up-to-date when the inputs have not changed,
     * the task must declare an output, even if it's not used. Tasks with no
     * output are always run regardless of whether the inputs have changed.
     */
    @get:OutputDirectory
    abstract val output: DirectoryProperty

    /**
     * The golden badging file to compare against.
     * This file contains the expected badging information.
     */
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val goldenBadging: RegularFileProperty

    /**
     * The generated badging file to compare against the golden badging file.
     * This file is generated by the [GenerateBadgingTask].
     */
    @get:PathSensitive(PathSensitivity.NONE)
    @get:InputFile
    abstract val generatedBadging: RegularFileProperty

    /**
     * The name of the task that updates the golden badging file.
     * This is used to provide a helpful message to the user if the check fails.
     */
    @get:Input
    abstract val updateBadgingTaskName: Property<String>

    /**
     * The group of this task. This is used by Gradle to categorize tasks.
     * This task belongs to the [LifecycleBasePlugin.VERIFICATION_GROUP],
     * which is used for tasks that verify the project.
     */
    override fun getGroup(): String = LifecycleBasePlugin.VERIFICATION_GROUP

    /**
     * Executes the `task` action, which compares the generated badging file with
     * the golden badging file. If they are different, an assertion error is thrown.
     * The error message includes instructions on how to update the golden badging file.
     */
    @TaskAction
    fun taskAction() {
        assertWithMessage(
            "Generated badging is different from golden badging! " +
                "If this change is intended, run ./gradlew ${updateBadgingTaskName.get()}",
        )
            .that(generatedBadging.get().asFile.readText())
            .isEqualTo(goldenBadging.get().asFile.readText())
    }
}

/**
 * Returns a new string with the first character capitalized.
 * If the first character is already capitalized, the original string is returned.
 */
private fun String.capitalized() = replaceFirstChar {
    if (it.isLowerCase()) it.titlecase() else it.toString()
}

/**
 * Configures badging tasks for each `variant` of the application.
 *
 * This function registers three tasks for each `variant`:
 * 1.  `generate${variant}Badging`: Generates the badging file from the APK.
 * 2.  `update${variant}Badging`: Copies the generated badging file to the project directory,
 *     effectively updating the "golden" badging file.
 * 3.  `check${variant}Badging`: Compares the generated badging file with the golden badging
 *     file and fails the build if they are different.
 *
 * @param baseExtension The [BaseExtension] from the Android Gradle Plugin, used to access
 * build tools version.
 * @param componentsExtension The [ApplicationAndroidComponentsExtension] from the Android
 * Gradle Plugin, used to access variants and SDK components.
 */
fun Project.configureBadgingTasks(
    baseExtension: BaseExtension,
    componentsExtension: ApplicationAndroidComponentsExtension,
) {
    // Registers a callback to be called, when a new variant is configured
    componentsExtension.onVariants { variant: ApplicationVariant ->
        // Registers a new task to verify the app bundle.
        val capitalizedVariantName: String = variant.name.capitalized()
        val generateBadgingTaskName = "generate${capitalizedVariantName}Badging"

        @Suppress("UnstableApiUsage")
        val generateBadging: TaskProvider<GenerateBadgingTask> =
            tasks.register<GenerateBadgingTask>(generateBadgingTaskName) {
                apk = variant.artifacts.get(SingleArtifact.APK_FROM_BUNDLE)
                aapt2Executable.set(
                    // TODO: Replace with `sdkComponents.aapt2` when it's available in AGP
                    //       https://issuetracker.google.com/issues/376815836
                    componentsExtension.sdkComponents.sdkDirectory.map { directory ->
                        directory.file(
                            "${SdkConstants.FD_BUILD_TOOLS}/" +
                                "${baseExtension.buildToolsVersion}/" +
                                SdkConstants.FN_AAPT2,
                        )
                    },
                )
                badging = project.layout.buildDirectory.file(
                    "outputs/apk_from_bundle/${variant.name}/${variant.name}-badging.txt",
                )

            }

        val updateBadgingTaskName = "update${capitalizedVariantName}Badging"
        tasks.register<Copy>(updateBadgingTaskName) {
            from(generateBadging.map(GenerateBadgingTask::badging))
            into(project.layout.projectDirectory)
        }

        val checkBadgingTaskName = "check${capitalizedVariantName}Badging"
        tasks.register<CheckBadgingTask>(checkBadgingTaskName) {
            goldenBadging = project.layout.projectDirectory.file("${variant.name}-badging.txt")

            generatedBadging.set(generateBadging.flatMap(GenerateBadgingTask::badging))

            this.updateBadgingTaskName = updateBadgingTaskName

            output = project.layout.buildDirectory.dir("intermediates/$checkBadgingTaskName")

        }
    }
}
