package android.support.composegraph3d

import android.os.Bundle
import android.support.composegraph3d.lib.Graph
import android.support.composegraph3d.ui.theme.ComposeGraph3dTheme
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material.Colors
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableLongStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.withFrameNanos
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.graphics.drawscope.scale
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.onPlaced
import androidx.compose.ui.tooling.preview.Preview
import kotlinx.coroutines.isActive

/**
 * This demo draws an interactive 3D animated graph to a [Canvas] using the [Graph] class to
 * generate [ImageBitmap]'s for each frame.
 */
class MainActivity : ComponentActivity() {
    /**
     * Called when the activity is starting. First we call our super's implementation of `onCreate`,
     * then we call the [setContent] method to have it compose as our root view a Composable which
     * consists of a [ComposeGraph3dTheme] custom [MaterialTheme] wrapped [Surface] whose `modifier`
     * argument is a [Modifier.fillMaxSize] to have it occupy its entire incoming size constraints,
     * and whose `color` argument sets its background [Color] to the [Colors.background] color of
     * [MaterialTheme.colors] (which is [Color.White] since [ComposeGraph3dTheme] does not override
     * it. The `content` of the [Surface] is our [Greeting] Composable with its `name` argument the
     * string "Android".
     *
     * @param savedInstanceState we do not override [onSaveInstanceState] so do not use.
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ComposeGraph3dTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    Greeting(name = "Android")
                }
            }
        }
    }
}

/**
 * This is our main Composable, which consists of a [Column] which holds a [Text] displaying the
 * text "Hello $name!" followed by our [Graph3D] Composable which displays the interactive animated
 * 3D graph generated by [Graph], followed by another [Text] displaying the text "Hello $name!"
 * (where "$name" is our [String] parameter [name]). The `modifier` argument of the [Column] is a
 * [Modifier.background] that sets its background color to [Color.LightGray], to which is chained
 * a [Modifier.fillMaxSize] to have it occupy its entire incoming size constraints. The `modifier`
 * argument of the [Graph3D] is a [Modifier.fillMaxWidth] to have it occupy its entired incoming
 * width constrain, followed by an [Modifier.aspectRatio] that sets its aspect ratio to 1.0f, and to
 * this is chained a [Modifier.background] that sets its background color to [Color.White].
 */
@Composable
fun Greeting(name: String) {
    Column(
        modifier = Modifier
            .background(color = Color.LightGray)
            .fillMaxSize()
    ) {
        Text(text = "Hello $name!")
        Graph3D(
            modifier = Modifier
                .fillMaxWidth()
                .aspectRatio(ratio = 1f)
                .background(color = Color.White))
        Text(text = "Hello $name!")
    }
}


/**
 * This Composable handles all the compose plumbing required to display the [ImageBitmap]'s that the
 * [Graph] class generates for each frame (believe it or not).
 */
@Composable
fun Graph3D(modifier: Modifier) {
    val graph = remember { Graph() }
    val time = remember { mutableLongStateOf(System.nanoTime()) }

    LaunchedEffect(Unit) {
        while (isActive) {
            withFrameNanos {
                time.longValue = System.nanoTime()
                graph.getImageForTime(time.longValue)
            }
        }
    }

    Canvas(modifier = modifier
        .onPlaced {
            graph.setSize(it.size.width, it.size.width)
        }
        .pointerInput(Unit) {
            detectDragGestures(
                onDragStart = {
                    graph.dragStart(it)
                },
                onDragEnd = {
                    graph.dragStopped()
                },
                onDragCancel = {
                    graph.dragStopped()
                },
                onDrag = { change, dragAmount ->
                    graph.drag(change, dragAmount)
                }
            )
        }
    ) {
        time.longValue // Cute: reads cause recomposition when `time` changes value in LaunchedEffect
        scale(scale = 2.0f, pivot = Offset(0f, 0f)) {
            drawImage(image = graph.bitmap)
        }
    }

}

/**
 * TODO: Add kdoc
 */
@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    ComposeGraph3dTheme {
        Greeting("Android")
    }
}